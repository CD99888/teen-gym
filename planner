# README.md

## Teen Gym Planner MVP
This is a minimal working app to generate safe, teen‑appropriate gym plans. It has:
- Landing page with CTA
- Intake form (age, equipment, days/week, etc.)
- Serverless API that builds a safe plan (no AI yet)
- Plan display page

Deployable on Vercel.

---

## File structure
/app
  /page.tsx              → Landing page
  /intake/page.tsx       → Intake form
  /plan/page.tsx         → Displays generated plan
  /api/plan/route.ts     → Serverless: returns plan JSON
/lib
  /types.ts              → Shared types
  /schema.ts             → Zod validators
  /exercise-lib.ts       → Whitelisted exercises
  /templates.ts          → Base plan templates
  /engine.ts             → pickTemplate, applyCaps

---

## package.json
{
  "name": "teen-gym-planner-mvp",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "next": "14.2.3",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "zod": "3.23.8"
  },
  "devDependencies": {
    "typescript": "5.6.2",
    "@types/react": "18.2.66",
    "@types/node": "20.11.30"
  }
}

---

# /app/page.tsx
export default function Page() {
  return (
    <main className="p-6 max-w-3xl mx-auto">
      <h1 className="text-3xl font-bold">Teen Gym Plans</h1>
      <p className="mt-2">Safe, teen‑appropriate training plans (13–18). Parent‑approved. No unsafe max testing.</p>
      <a href="/intake" className="inline-block mt-6 px-4 py-2 rounded bg-black text-white">Get My Plan</a>
    </main>
  )
}

---

# /app/intake/page.tsx
"use client"
import { useState } from "react"
import type { Intake } from "@/lib/types"

export default function IntakePage() {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string|null>(null)

  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    setLoading(true)
    const form = new FormData(e.currentTarget)
    const intake: Intake = {
      age: Number(form.get("age")),
      sex: (form.get("sex") as any) || "male",
      training_age_months: Number(form.get("training_age_months")),
      equipment_set: form.get("equipment_set") as any,
      days_per_week: Number(form.get("days_per_week")) as any,
      goals: form.get("goals") as any,
      injuries: String(form.get("injuries")||""),
      consent: Boolean(form.get("consent"))
    }
    if (!intake.consent) { setError("Guardian consent required"); setLoading(false); return }
    const res = await fetch("/api/plan", { method:"POST", body: JSON.stringify(intake) })
    const data = await res.json()
    if (data.refuse) { setError(data.reason); setLoading(false); return }
    localStorage.setItem("lastPlan", JSON.stringify(data))
    window.location.href = "/plan"
  }

  return (
    <main className="p-6 max-w-3xl mx-auto">
      <h1 className="text-2xl font-bold">Intake</h1>
      <form onSubmit={onSubmit} className="mt-6 space-y-4">
        <div><label>Age</label><input name="age" type="number" required min={13} max={18} className="border p-2 w-full"/></div>
        <div><label>Sex</label><select name="sex" className="border p-2 w-full"><option>male</option><option>female</option></select></div>
        <div><label>Training Age (months)</label><input name="training_age_months" type="number" required className="border p-2 w-full"/></div>
        <div><label>Equipment</label><select name="equipment_set" className="border p-2 w-full"><option value="dumbbells_home">Dumbbells</option><option value="basic_gym">Basic Gym</option><option value="school_gym">School Gym</option></select></div>
        <div><label>Days/week</label><select name="days_per_week" className="border p-2 w-full"><option value="3">3</option><option value="4">4</option><option value="5">5</option></select></div>
        <div><label>Goal</label><select name="goals" className="border p-2 w-full"><option>hypertrophy</option><option>strength_base</option><option>general_fitness</option></select></div>
        <div><label>Injuries or issues?</label><textarea name="injuries" className="border p-2 w-full"/></div>
        <div><input type="checkbox" name="consent" required/> Guardian consent confirmed</div>
        {error && <p className="text-red-600">{error}</p>}
        <button disabled={loading} className="px-4 py-2 rounded bg-black text-white">{loading ? "Generating…" : "Generate Plan"}</button>
      </form>
    </main>
  )
}

---

# /app/plan/page.tsx
"use client"
import { useEffect, useState } from "react"
import type { Plan } from "@/lib/types"

export default function PlanPage() {
  const [plan, setPlan] = useState<Plan|null>(null)
  useEffect(()=>{ const raw = localStorage.getItem("lastPlan"); if (raw) setPlan(JSON.parse(raw)) },[])
  if (!plan) return <main>No plan. <a href="/intake">Make one</a></main>
  return (
    <main className="p-6 max-w-3xl mx-auto">
      <h1 className="text-2xl font-bold">{plan.split_name}</h1>
      {plan.sessions.map(s=>(<section key={s.day}><h2>Day {s.day}</h2><ul>{s.exercises.map((e,i)=>(<li key={i}>{e.name} — {e.sets}×{e.reps} @ RIR {e.RIR}</li>))}</ul></section>))}
    </main>
  )
}

---

# /app/api/plan/route.ts
import { NextResponse } from "next/server"
import type { Intake, Plan } from "@/lib/types"
import { pickTemplate, applyCaps } from "@/lib/engine"
import { PlanZ } from "@/lib/schema"

export async function POST(req: Request) {
  const intake = await req.json() as Intake
  if (!intake.consent) return NextResponse.json({refuse:true, reason:"Guardian consent required."})
  if ((intake.injuries||"").match(/pain|injury|faint|doctor/i)) return NextResponse.json({refuse:true, reason:"Safety flag: seek medical guidance"})
  let plan: Plan = pickTemplate(intake)
  plan = applyCaps(plan, intake.age)
  PlanZ.parse(plan)
  return NextResponse.json(plan)
}

---

# /lib/types.ts
export type Intake = {
  age:number
  sex:string
  training_age_months:number
  equipment_set:"dumbbells_home"|"basic_gym"|"school_gym"
  days_per_week:3|4|5
  goals:string
  injuries?:string
  consent:boolean
}

export type ExercisePrescription = { name:string, sets:number, reps:string, RIR:number, rest_sec:number }
export type Session = { day:number, exercises:ExercisePrescription[] }
export type Plan = { split_name:string, days_per_week:number, sessions:Session[] }

---

# /lib/schema.ts
import { z } from "zod"
export const ExerciseZ = z.object({ name:z.string(), sets:z.number().min(1).max(5), reps:z.string(), RIR:z.number().min(0).max(3), rest_sec:z.number().min(45).max(150) })
export const SessionZ = z.object({ day:z.number().min(1).max(7), exercises:z.array(ExerciseZ) })
export const PlanZ = z.object({ split_name:z.string(), days_per_week:z.number(), sessions:z.array(SessionZ) })

---

# /lib/exercise-lib.ts
export const EXERCISES = ["Goblet Squat","DB Bench Press","DB Row","Plank","Split Squat","Push-Up","Pull-Up","DB Curl","DB Triceps Extension"]

---

# /lib/templates.ts
import type { Plan } from "./types"
export const TEMPLATE_DB_3: Plan = { split_name:"3-Day Full Body (DB)", days_per_week:3, sessions:[{day:1, exercises:[{name:"Goblet Squat", sets:3, reps:"8-12", RIR:1, rest_sec:90},{name:"DB Bench Press", sets:3, reps:"8-12", RIR:1, rest_sec:90},{name:"DB Row", sets:3, reps:"8-12", RIR:1, rest_sec:90},{name:"Plank", sets:3, reps:"30s", RIR:2, rest_sec:60}]}] }

---

# /lib/engine.ts
import type { Intake, Plan } from "./types"
import { TEMPLATE_DB_3 } from "./templates"
export function pickTemplate(intake:Intake):Plan { return TEMPLATE_DB_3 }
export function applyCaps(plan:Plan, age:number):Plan { let clone = JSON.parse(JSON.stringify(plan)); if(age<15){ for(const s of clone.sessions){ for(const e of s.exercises){ e.RIR = Math.max(e.RIR,1) }}} return clone }
